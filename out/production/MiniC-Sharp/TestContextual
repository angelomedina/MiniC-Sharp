class AllProds
  const int nPoints = 2;
  const char exclaim = '!';
  const char caracter_raro = '\n';
  float i;
  int test2;

  class Point {
    int x, y;
    float i;
  }
  char[] msg;
  int[] pArr;
  boolean test1;
{
  void WriteError ()
    int i;
    boolean test2;
  {

    i = 0;
    test1 = true;  //verificación de alcances
    test2 = test1;  //verificación de alcances cuando hay una global llamada "test2"
    while(i<len(msg)){
        write(msg[i]);  //error: cuando se visita el metodo write()
        i++;}
    }

    for(i;i<len(msg);i++;){
    write(msg[i]); //error: cuando se visita el metodo write()

    }
    }
      write(exclaim); //error: cuando se visita el metodo write()
      while (i > 0) {
        i--;
        if (i < 3 && test1==true) break; // error: el if no cumple la estructura del if : visit(ctx.condition());
                                                                                          visit(ctx.statement(0));
                                                                                          visit(ctx.statement(1));
        write(msg[i], 2);
      }
  }

  int GetX (Point p) { p = new Point; return p.i; } // error de tipos, en caso de reconocerlo, cambiar a "return p.x"

  //error: int x como parametro da error xq ya ha sido declarado como global
  void SetX (int x, Point p) {
    if (x > -10 && x <= 9 ||
        x == 4*3/4%4+12-11*(2147483647/(-2147483647-1)%2) )
     { //nota: abrir y cerrar oorchetes
      p.x = x;
      i = x; //error de tipos, en caso de fallo cambiar la "x" por un numero float
      }
    else{
        i= WriteError(3); // error de alcances porque no existe este parametro en la definicion
        }
    return i; //error porque no es funcion;
  }


  //error: revisar el parser para ver si admite char[]
  int SetMsg () {
    msg = new char[];
    msg[0] = 'E';
    msg[1] = 'r';
    msg[2] = 'r';
    msg[3] = 'r';
    msg[4] = msg[3];
    msg[3] = caracter_raro; //verificacion de constantes globales
    write(len(msg),1); //verificacion de métodos predefinidos //errro en metodo write()

    //verificar error de no existencia de retorno en funcion, en caso de encontrarlo, agregar el retorno correspondiente
  }

  void SetPoints ()
    int i;
  {
    pArr = new int[]; //error: en la gramatica no acepta new int[]: solo new int;
    i = 0;
    while (i < len(pArr)) {
      pArr[i] = new Point; //error de tipos por la definicion de clases que solo permiten tipos simples
      pArr[i] = i;
      pArr[i] = 3.14; //debe dar error de tipos.
      i++;
    }
  }

  void Main ()
    int i;
    Point algo;
  {

    write("Hola Mundo"); //verificar constantes String // error de metodo
    SetMsg(); //puede o no ser error que para la llamada a una funcion no se utilice su retorno //error: xq la gramatica no acepta  new char[]
    SetPoints(); //error: xq la gramatica no acepta  new int[]
    read(i);
    if (i < nPoints) { // error de tipos en: i y nPoints
      write(GetX(algo)); // error de metodo
    }
    else
      WriteError();
    write('\n');

  }
}
// ANOTAR SUS COMENTARIOS EN MAYUSCULA Y NO QUITAR NADA DE LO QUE VIENE EN EL ARCHIVO SINO SOLO COMENTARLO PERO A LA VEZ COLOCAR EL EQUIVALENTE CORRECTO
// CUALQUIER COSA QUE SEA ERROR MIO AL MOMENTO DE HACER LA PRUEBA, FAVOR CORREGIRLO Y ANOTARLO