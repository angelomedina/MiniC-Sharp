

/*
Monkey

Los ejemplos de pruebas son individuales, se requiere copiarlos y ejecutarlos por separado.
*/


// ejemplo de declaracion de variables similares en diferentes contextos y usadas en otro

let a=0;
let b="hola";
let c=5;

let funcion=fn(a,b)
{
    let c=a+b;
}

// se pueden declarar variables iguales en diferentes niveles, pero no en el mismo

let x=0;
let f=fn(x,y)
{
        let a=0;
        let x=0; // da error porque la x recibida por parametro estÃ¡ en el mismo nivel.
        let b=0;
        if(a==b)
        {
            let c=0;
            let r=0;
            let a=0;
        }
}

// no puede retornar en cualquier parte

let b=0;
if(b==0)
{
    return 0; // error
}

// solo retorna dentro de funciones (compilacion exitosa)

let b=0;

let fun=fn(c,d)
{
    //return c+d;
    return true;
}


//la condicion del if representa un valor booleano

let v=4;
if(v >= 5+12)
{
let f=4;
}

// un carro erroneo de if

let v=4;
if("hola")
{
let f=4;
}


// Usando una funcion dentro de un if y como parametro de si misma

let funt=fn(a,b)
{
    let r=a+b;
}

let v=4;
if(funt(3,4)<= funt(1,2)) // esta operacion representa valor booleano
{
    let f=funt(funt(3,4),funt(4,4));
}


// error con la cantidad de parametros de una funcion

let funt=fn(a,b)
{
let r=a+b;
}

let v=4;
if(v <= funt(1,2,3)) // recibe solo 2 parametros
{
let f=4;
}


// se pueden declarar funciones del mismo nombre que variables, pero no otras funciones

let x=0;
let f=fn(x,y)
{
    let c=0;
}

let f=fn(r,t,w,z) // da error porque la funcion ya existe
{
    let v=0;
}

let x=fn(r,t)
{
    let v=0;
}


// el indice del element acces debe ser entero

let lista=[3,5];
let variable=0;
let w=lista[true]; // da error
let z=lista["hola"]; // error
let u=lista[variable]; //correcta
let p=lista[variable+5];



